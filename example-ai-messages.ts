import { AIService, AIConfig } from './src/AIService';
import { MessageProcessor, MessageProcessorConfig } from './src/MessageProcessor';
import { Instagram } from './src/Instagram';

/**
 * Exemplo de uso das classes AIService e MessageProcessor
 * para resposta automatizada de mensagens do Instagram
 */

// Configura√ß√£o da IA
const aiConfig: AIConfig = {
  // Adicione suas chaves de API aqui
  openaiApiKey: process.env.OPENAI_API_KEY, // 'sk-...'
  googleApiKey: process.env.GOOGLE_API_KEY, // 'AIza...'
  defaultProvider: 'openai', // ou 'google'
  temperature: 0.7, // Criatividade da resposta (0-1)
  maxTokens: 150 // M√°ximo de tokens por resposta
};

// Configura√ß√£o do processador de mensagens
const processorConfig: MessageProcessorConfig = {
  checkInterval: 5, // Verificar a cada 5 minutos
  maxMessagesPerBatch: 10, // Processar at√© 10 mensagens por vez
  minResponseDelay: 30000, // M√≠nimo 30 segundos entre respostas
  maxResponseDelay: 180000, // M√°ximo 3 minutos entre respostas
  timeWindowHours: 24, // Buscar mensagens das √∫ltimas 24 horas
  enableHumanization: true // Ativar delays humanizados
};

async function initializeAIMessageSystem() {
  try {
    console.log('ü§ñ Inicializando sistema de resposta automatizada...');
    
    // 1. Inicializar servi√ßo de IA
    const aiService = new AIService(aiConfig);
    
    // Verificar se est√° configurado corretamente
    if (!aiService.isConfigured()) {
      throw new Error('‚ùå AIService n√£o est√° configurado. Verifique as chaves de API.');
    }
    
    console.log(`‚úÖ AIService configurado com provedores: ${aiService.getAvailableProviders().join(', ')}`);
    
    // 2. Inicializar processador de mensagens
    const messageProcessor = new MessageProcessor(aiService, processorConfig);
    
    // 3. Exemplo de como registrar inst√¢ncias do Instagram
    // (voc√™ precisaria ter suas inst√¢ncias do Instagram j√° inicializadas)
    /*
    const instagramUser1 = new Instagram();
    await instagramUser1.initialize('username1', 'password1');
    messageProcessor.registerInstagramInstance('username1', instagramUser1);
    
    const instagramUser2 = new Instagram();
    await instagramUser2.initialize('username2', 'password2');
    messageProcessor.registerInstagramInstance('username2', instagramUser2);
    */
    
    // 4. Iniciar processamento autom√°tico
    messageProcessor.startAutoProcessing();
    
    console.log('üöÄ Sistema de resposta automatizada iniciado!');
    console.log('üìä Para ver estat√≠sticas, use: messageProcessor.getStats()');
    
    // 5. Exemplo de processamento manual de uma mensagem espec√≠fica
    // await messageProcessor.processSpecificMessage('username1', 123);
    
    // 6. Exemplo de teste da IA
    await testAIService(aiService);
    
    return { aiService, messageProcessor };
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar sistema:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o para testar o servi√ßo de IA
 */
async function testAIService(aiService: AIService) {
  try {
    console.log('\nüß™ Testando AIService...');
    
    const testContext = {
      username: 'joao_teste',
      messageContent: 'Oi! Como voc√™ est√°?',
      conversationHistory: [
        'joao_teste: Ol√°!',
        'Eu: Oi Jo√£o! Tudo bem?'
      ],
      userProfile: {
        name: 'Jo√£o Silva',
        bio: 'Desenvolvedor apaixonado por tecnologia',
        followersCount: 1500
      }
    };
    
    // Testar resposta √∫nica
    console.log('üìù Gerando resposta √∫nica...');
    const response = await aiService.generateResponse(testContext);
    console.log(`‚úÖ Resposta (${response.provider}): "${response.content}"`);
    console.log(`‚è±Ô∏è Tempo de processamento: ${response.processingTime}ms`);
    
    // Testar m√∫ltiplas respostas
    console.log('\nüìù Gerando m√∫ltiplas respostas...');
    const multipleResponses = await aiService.generateMultipleResponses(testContext, 3);
    
    multipleResponses.forEach((resp, index) => {
      console.log(`${index + 1}. (${resp.provider}): "${resp.content}"`);
    });
    
    // Selecionar melhor resposta
    const bestResponse = aiService.selectBestResponse(multipleResponses);
    console.log(`üèÜ Melhor resposta: "${bestResponse.content}"`);
    
  } catch (error) {
    console.error('‚ùå Erro no teste da IA:', error);
  }
}

/**
 * Fun√ß√£o para monitorar estat√≠sticas do sistema
 */
function startStatsMonitoring(messageProcessor: MessageProcessor) {
  setInterval(() => {
    const stats = messageProcessor.getStats();
    
    if (stats.totalProcessed > 0) {
      console.log('\nüìä Estat√≠sticas do Sistema:');
      console.log(`   Total processadas: ${stats.totalProcessed}`);
      console.log(`   Respostas enviadas: ${stats.successfulResponses}`);
      console.log(`   Falhas: ${stats.failedResponses}`);
      console.log(`   Taxa de sucesso: ${((stats.successfulResponses / stats.totalProcessed) * 100).toFixed(1)}%`);
      console.log(`   √öltima execu√ß√£o: ${stats.lastProcessingTime.toLocaleString()}`);
    }
  }, 10 * 60 * 1000); // A cada 10 minutos
}

/**
 * Fun√ß√£o para parar o sistema graciosamente
 */
function stopSystem(messageProcessor: MessageProcessor) {
  console.log('üõë Parando sistema de resposta automatizada...');
  messageProcessor.stopAutoProcessing();
  
  // Mostrar estat√≠sticas finais
  const finalStats = messageProcessor.getStats();
  console.log('üìä Estat√≠sticas finais:', finalStats);
  
  console.log('‚úÖ Sistema parado com sucesso!');
}

// Exemplo de uso
if (require.main === module) {
  initializeAIMessageSystem()
    .then(({ aiService, messageProcessor }) => {
      // Iniciar monitoramento de estat√≠sticas
      startStatsMonitoring(messageProcessor);
      
      // Configurar parada graceful
      process.on('SIGINT', () => {
        stopSystem(messageProcessor);
        process.exit(0);
      });
      
      process.on('SIGTERM', () => {
        stopSystem(messageProcessor);
        process.exit(0);
      });
      
      console.log('\nüí° Dicas de uso:');
      console.log('   - Configure as vari√°veis de ambiente OPENAI_API_KEY e/ou GOOGLE_API_KEY');
      console.log('   - Registre suas inst√¢ncias do Instagram com messageProcessor.registerInstagramInstance()');
      console.log('   - Use Ctrl+C para parar o sistema graciosamente');
      console.log('   - Monitore os logs para acompanhar o processamento');
      
    })
    .catch(error => {
      console.error('‚ùå Falha ao inicializar sistema:', error);
      process.exit(1);
    });
}

export {
  initializeAIMessageSystem,
  testAIService,
  startStatsMonitoring,
  stopSystem
};

/**
 * INSTRU√á√ïES DE USO:
 * 
 * 1. Configure as vari√°veis de ambiente:
 *    - OPENAI_API_KEY=sk-...
 *    - GOOGLE_API_KEY=AIza...
 * 
 * 2. Execute o exemplo:
 *    npx ts-node example-ai-messages.ts
 * 
 * 3. O sistema ir√°:
 *    - Verificar mensagens n√£o respondidas a cada 5 minutos
 *    - Gerar respostas humanizadas usando IA
 *    - Aplicar delays aleat√≥rios entre respostas (30s-3min)
 *    - Enviar respostas via Instagram
 *    - Marcar mensagens como respondidas no banco
 * 
 * 4. Funcionalidades anti-detec√ß√£o:
 *    - Delays humanizados entre respostas
 *    - Varia√ß√£o no tempo de resposta
 *    - Respostas contextuais baseadas no hist√≥rico
 *    - M√∫ltiplas varia√ß√µes de resposta para escolher a melhor
 * 
 * 5. Monitoramento:
 *    - Logs detalhados de todas as opera√ß√µes
 *    - Estat√≠sticas de performance
 *    - Controle de erros e fallbacks
 */